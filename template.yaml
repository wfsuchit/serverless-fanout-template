AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  fanout-template

  Sample SAM Template for fanout-template

Parameters:
  # Currently not in use
  ModuleName:
    Type: String
    Default: fanout-template
    Description: Module name with respect to which all the resources will be made

Resources:

  MySAMApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["-", [!Ref "ModuleName", "apigateway"]]

  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt MySAMApiGateway.RootResourceId
      PathPart: poc
      RestApiId: !Ref MySAMApiGateway

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - MySAMApiGateway
      - MyApiGatewayResource
      - MyApiGatewayMethod
    Properties:
      RestApiId: !Ref MySAMApiGateway
      StageName: prod

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MySAMApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      RequestParameters:
        method.request.querystring.message: false
        method.request.querystring.subject: false
        # method.request.querystring.topic: false
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Credentials: !GetAtt MyApiGatewaySNSRole.Arn
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:sns:path//?Action=Publish&TopicArn=${HealthtechSNS}"
        RequestParameters:
          # integration.request.querystring.TopicArn: "method.request.querystring.topic"
          integration.request.querystring.Subject: "method.request.querystring.subject"
          integration.request.querystring.Message: "method.request.querystring.message"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: "200"

  MyApiGatewaySNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: MyApiGatewaySNSRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - SNS:Publish
                Resource: !Ref HealthtechSNS

  HealthtechSNS:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Join ["-", [!Ref "ModuleName", "sns"]]
      # TopicName: !Join ["-", [!Ref "ModuleName", "sns"]]
      FifoTopic: false
      Subscription:
        - Endpoint: !GetAtt HealthtechQueueOne.Arn
          Protocol: "sqs"
        - Endpoint: !GetAtt HealthtechQueueTwo.Arn
          Protocol: "sqs"
      Tags:
        - Key: Env
          Value: POC
        - Key: module
          Value: !Ref "ModuleName"

  HealthtechQueueOne:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      Tags:
        - Key: Env
          Value: POC
        - Key: module
          Value: !Ref "ModuleName"
          
  HealthtechQueueTwo:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      VisibilityTimeout: 120
      Tags:
        - Key: Env
          Value: POC
        - Key: module
          Value: !Ref "ModuleName"

  MySQSQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: SQS:SendMessage
            Resource: arn:aws:sqs:ap-south-1:*
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref HealthtechSNS
      Queues:
        - !Ref HealthtechQueueOne
        - !Ref HealthtechQueueTwo

  LambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SQSLambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: 
                  - !GetAtt HealthtechQueueOne.Arn
                  - !GetAtt HealthtechQueueTwo.Arn
        - PolicyName: LambdaCloudWatchLogs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"

  LambdaOne:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "queueone", "lambdaone"]]
      Description: "SQS One triggered lambda One"
      Events:
        SqsEvent:
          Type: 'SQS'
          Properties:
            Queue: !GetAtt HealthtechQueueOne.Arn
            BatchSize: 1
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref HealthtechSNS

  LambdaThree:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: hello-world/
      Handler: app.lambdaHandler
      Runtime: nodejs18.x
      FunctionName: !Join ["-", [!Ref "ModuleName", "queuetwo", "lambdaone"]]
      Description: "SQS two triggered lambda One"
      Events:
        SqsEvent:
          Type: 'SQS'
          Properties:
            Queue: !GetAtt HealthtechQueueTwo.Arn
            BatchSize: 1
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          SNS_TOPIC_ARN: !Ref HealthtechSNS

# Outputs:
#   ApiEndpoint:
#     Description: 'API Gateway endpoint URL'
#     Value: !Sub 'https://${ServerlessOrderPipelineAPIGateway}.execute-api.${AWS::Region}.amazonaws.com/test/message'
